// This is your Prisma schema file for MongoDB
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ตาราง Users สำหรับผู้ใช้ระบบ
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String         @unique
  email         String         @unique
  password      String
  role          UserRole       @default(STAFF)
  firstName     String?
  lastName      String?
  phone         String?
  profileImage  String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  notifications Notification[]
  resolvedIssues Issue[]       @relation("ResolvedBy")
  
  @@map("users")
}

// ตาราง Rooms สำหรับห้องพัก
model Room {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  roomPrefix      String?
  roomNumber      String      @unique
  buildingName    String
  roomType        RoomType
  status          RoomStatus  @default(AVAILABLE)
  
  // Pricing
  monthlyRent     Float
  deposit         Float
  commonFee       Float?      @default(0)
  
  // Details
  size            Float?      // ตารางเมตร
  floor           Int
  description     String?
  
  // Images
  coverImage      String?
  additionalImages String[]
  
  // Address
  village         String?
  city            String?
  district        String?
  fullAddress     String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  tenants         Tenant[]
  contracts       Contract[]
  payments        Payment[]
  checkInOuts     CheckInOut[]
  issues          Issue[]
  
  @@map("rooms")
}

// ตาราง Tenants สำหรับผู้เช่า
model Tenant {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  
  // Personal Info
  firstName       String
  lastName        String
  phone           String      @unique
  email           String?
  profileImage    String?
  
  // Identification
  idType          IDType
  idNumber        String      @unique
  documentImage   String?
  
  // Address
  village         String?
  city            String?
  district        String?
  
  // Rental Info
  roomId          String?     @db.ObjectId
  room            Room?       @relation(fields: [roomId], references: [id])
  checkInDate     DateTime?
  checkOutDate    DateTime?
  status          TenantStatus @default(ACTIVE)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  contracts       Contract[]
  payments        Payment[]
  checkInOuts     CheckInOut[]
  issues          Issue[]
  
  @@map("tenants")
}

// ตาราง Contracts สำหรับสัญญาเช่า
model Contract {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  contractNumber  String      @unique
  
  // Relations
  roomId          String      @db.ObjectId
  room            Room        @relation(fields: [roomId], references: [id])
  tenantId        String      @db.ObjectId
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  
  // Owner Info
  ownerName       String
  ownerIdNumber   String
  ownerPhone      String
  
  // Terms
  startDate       DateTime
  endDate         DateTime
  monthlyRent     Float
  deposit         Float
  paymentDueDate  Int         // วันที่ของเดือน (1-31)
  
  status          ContractStatus @default(ACTIVE)
  documentUrl     String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  payments        Payment[]
  checkInOuts     CheckInOut[]
  
  @@map("contracts")
}

// ตาราง Payments สำหรับการชำระเงิน
model Payment {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  billNumber      String      @unique
  
  // Relations
  roomId          String      @db.ObjectId
  room            Room        @relation(fields: [roomId], references: [id])
  tenantId        String      @db.ObjectId
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  contractId      String?     @db.ObjectId
  contract        Contract?   @relation(fields: [contractId], references: [id])
  
  // Payment Info
  title           String
  dueDate         DateTime
  paidDate        DateTime?
  status          PaymentStatus @default(PENDING)
  paymentLink     String?
  
  // Payment Details
  roomRent        Float
  waterFee        Float       @default(0)
  electricityFee  Float       @default(0)
  commonFee       Float       @default(0)
  otherFees       OtherFee[]
  totalAmount     Float
  
  // Receipt
  receiptNumber   String?
  receiptUrl      String?
  
  notes           String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("payments")
}

// ตาราง CheckInOut สำหรับการเข้า-ออก
model CheckInOut {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  type            CheckType
  
  // Relations
  roomId          String      @db.ObjectId
  room            Room        @relation(fields: [roomId], references: [id])
  tenantId        String      @db.ObjectId
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  contractId      String?     @db.ObjectId
  contract        Contract?   @relation(fields: [contractId], references: [id])
  
  date            DateTime
  
  // Check In Details
  initialPaymentId String?    @db.ObjectId
  depositPaid     Boolean?
  
  // Check Out Details
  inspectionDate  DateTime?
  keyReturned     Boolean?
  electricalAppliances Boolean?
  roomCleaned     Boolean?
  furnitureComplete Boolean?
  bedroomCondition Boolean?
  bathroomCondition Boolean?
  damages         Damage[]
  totalDeduction  Float?
  depositReturned Float?
  
  status          CheckStatus @default(PENDING)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("checkinouts")
}

// ตาราง Issues สำหรับแจ้งปัญหา
model Issue {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  roomId          String      @db.ObjectId
  room            Room        @relation(fields: [roomId], references: [id])
  tenantId        String      @db.ObjectId
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  
  // Issue Details
  reportDate      DateTime    @default(now())
  category        IssueCategory
  description     String
  images          String[]
  status          IssueStatus @default(PENDING)
  priority        Priority    @default(MEDIUM)
  
  // Resolution
  resolvedDate    DateTime?
  resolvedById    String?     @db.ObjectId
  resolvedBy      User?       @relation("ResolvedBy", fields: [resolvedById], references: [id])
  resolutionNotes String?
  repairCost      Float?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("issues")
}

// ตาราง Notifications สำหรับการแจ้งเตือน
model Notification {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  
  userId          String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  
  type            NotificationType
  title           String
  message         String
  relatedId       String?     @db.ObjectId // อ้างอิงถึง roomId, paymentId, issueId
  isRead          Boolean     @default(false)
  
  createdAt       DateTime    @default(now())
  
  @@map("notifications")
}

// Embedded Types
type OtherFee {
  description     String
  amount          Float
}

type Damage {
  description     String
  repairCost      Float
}

// Enums
enum UserRole {
  ADMIN
  OWNER
  STAFF
}

enum RoomType {
  ROOM_ROW        // ห้องแถว
  APARTMENT       // อพาร์ตเมนต์
  CONDO          // คอนโด
  DORMITORY      // หอพัก
}

enum RoomStatus {
  AVAILABLE       // ว่าง
  OCCUPIED        // เต็ม
  RESERVED        // จอง
  MAINTENANCE     // ซ่อมบำรุง
}

enum IDType {
  NATIONAL_ID     // บัตรประชาชน
  HOUSE_REGISTRATION // สำมะโนครัว
  PASSPORT        // พาสปอร์ต
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  BLACKLIST
}

enum ContractStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}

enum PaymentStatus {
  PENDING         // รอชำระ
  PAID           // ชำระแล้ว
  OVERDUE        // ค้างชำระ
  PARTIAL        // ชำระบางส่วน
}

enum CheckType {
  CHECK_IN
  CHECK_OUT
}

enum CheckStatus {
  PENDING
  COMPLETED
}

enum IssueCategory {
  WATER_SUPPLY    // น้ำประปา
  ELECTRICITY     // ไฟฟ้า
  ROOM           // ห้องพัก
  FURNITURE      // เฟอร์นิเจอร์
  OTHER          // อื่นๆ
}

enum IssueStatus {
  PENDING         // รอดำเนินการ
  IN_PROGRESS     // กำลังดำเนินการ
  RESOLVED        // แก้ไขแล้ว
  CLOSED         // ปิดเรื่อง
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  PAYMENT_DUE     // ครบกำหนดชำระ
  CHECK_IN        // แจ้งเข้า
  CHECK_OUT       // แจ้งออก
  ISSUE          // แจ้งปัญหา
  ANNOUNCEMENT    // ประกาศ
}